#################################################
#         Onegroup Server Configuration         #
#                                               #
# Onegroup Version: 0.5.0                       #
# Author: Seb Sherry                            #
#                                               #
# Order of checking for configuration:          #
# 1. /etc/onegroup/onegroup.conf                #
# 2. /usr/local/onegroup/onegroup.conf          #
# 3. . (Not recommended. Development only)      #
#                                               #
#################################################

### OpenVPN configuration ###
# Location of the openvpn keys
openvpn_keys=/etc/openvpn/keys

# Location of the easy-rsa file used in setup
openvpn_ersa=/etc/openvpn/easy-rsa

# Location of the basic server and client configurations
openvpn_server_config=/etc/openvpn/server.conf
openvpn_client_config=/etc/openvpn/client.conf

# Location of the openvpn client configuration directory
openvpn_ccd=/etc/openvpn/ccd


### Server configuration ###
# Cherrypy and flask config

# Set the server secret key. RANDOM lets the server pick a strong random key
secret=RANDOM

# Delete users when keys expire
delete_on_expire=False

# Cherrypy host settings
server_port=80
server_host=0.0.0.0

# SSL Config 
# Leave fields as 'None' if not using SSL. 
# Cert chain field is optional
# Note if SSL is set, port will automatically be set to 443
server_ssl_cert=None
server_ssl_private=None
server_ssl_cert_chain=None

### Mail configuration ###
# Allows email functionality
# Password reset, key distribution, etc
email=capstoneonegroup@gmail.com
password=MaristCollege!
mail_server=smtp.gmail.com
mail_port=465

### Multinode configuration ###
# Multinode allows the use of multiple servers 
# through one interface. This is disabled by default 
# but if enabled on each node, you MUST specify if 
# the node is a master or a slave.
#
# Slave nodes operate on top of a VPN server without the web 
# interface and receive commands from the master node.
#
# Master nodes issues commands to the Slave nodes via http 
# requests (or https if specified). From a master node, an
# administrator can manage multiple vpn servers from one 
# interface as if they were all on the same machine. 
# 
# A master node can also operate ontop of and control a vpn server 
# in the same way a slave can if specified. In this case, if a master
# node issues a command to itself, it will be handled as if it
# was a standard single node instance.
#
# To declare a slave node: change node to slave below
#
# To declare a master node: change node to master below
# On the master node, you must specify all slave nodes 
# in the node_locations section below. Slave nodes are identified 
# by a name followed by either ip or domain address (with optional port seperated by : ),
# seperated by a space. Each node should be on its own line. An example of specifying a node 
# looks like this:
#   node1 192.168.0.60:1024
#
# To have a master node also interact with a vpn server on its
# host machine, define a slave node as normal with "self" instead of an ip/domain address.
# For example:
#   aNode self 

# Enable multinode support 
multinode=False 

# Define this node as a master or a slave 
node=master

# If master, define all the slave nodes in the server section below.
# Each slave should be on it's own line. 
# If the master should also act as a slave, place "self" in the server section below.
# { and } should NOT be on the same line as a slave declaration 
node_locations={
master self
}
